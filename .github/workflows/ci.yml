name: CI Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'mainpage/**'
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'mainpage/**'
      - 'backend/**'

env:
  AWS_REGION: us-east-2
  ECR_REGISTRY: ${{ secrets.ECR_REPO }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: qoalswns14/aws-cicd-gamecenter
        token: ${{ secrets.GH_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECR repositories if not exist
      run: |
        # 프론트엔드 레포지토리 생성 시도
        aws ecr describe-repositories --repository-names game-website || \
        aws ecr create-repository --repository-name game-website
        
        # 백엔드 레포지토리 생성 시도
        aws ecr describe-repositories --repository-names game-backend || \
        aws ecr create-repository --repository-name game-backend

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Extract frontend version
      id: frontend-version
      run: |
        cd mainpage
        VERSION=$(cat VERSION)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Extract backend version
      id: backend-version
      run: |
        cd backend
        VERSION=$(cat VERSION)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build and push Frontend image
      env:
        IMAGE_TAG: ${{ github.sha }}
        VERSION: ${{ steps.frontend-version.outputs.version }}
        S3_BUCKET: ${{ secrets.S3_NAME }}
      run: |
        cd mainpage
        docker build -t $ECR_REGISTRY/game-website:$IMAGE_TAG .

       

        docker push $ECR_REGISTRY/game-website:$IMAGE_TAG
        docker tag $ECR_REGISTRY/game-website:$IMAGE_TAG $ECR_REGISTRY/game-website:latest
        docker push $ECR_REGISTRY/game-website:latest
        docker tag $ECR_REGISTRY/game-website:$IMAGE_TAG $ECR_REGISTRY/game-website:v${VERSION}
        docker push $ECR_REGISTRY/game-website:v${VERSION}

    - name: Build and push Backend image
      env:
        IMAGE_TAG: ${{ github.sha }}
        VERSION: ${{ steps.backend-version.outputs.version }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/game-backend:$IMAGE_TAG .
        docker push $ECR_REGISTRY/game-backend:$IMAGE_TAG
        
        docker tag $ECR_REGISTRY/game-backend:$IMAGE_TAG $ECR_REGISTRY/game-backend:latest
        docker push $ECR_REGISTRY/game-backend:latest
        
        docker tag $ECR_REGISTRY/game-backend:$IMAGE_TAG $ECR_REGISTRY/game-backend:v${VERSION}
        docker push $ECR_REGISTRY/game-backend:v${VERSION}

    - name: Update Kubernetes manifests
      run: |
        # Frontend version update
        FRONTEND_VERSION=${{ steps.frontend-version.outputs.version }}
        BACKEND_VERSION=${{ steps.backend-version.outputs.version }}
        
        # Update frontend deployment
        sed -i "s|game-website:.*|game-website:v${FRONTEND_VERSION}|" k8s/mainpage/deployment.yaml
        
        # Update backend deployment
        sed -i "s|game-backend:.*|game-backend:v${BACKEND_VERSION}|" k8s/backend/deployment.yaml
        
        # Git configuration
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Pull latest changes
        git pull origin main
        
        # Stage and commit changes
        git add k8s/mainpage/deployment.yaml k8s/backend/deployment.yaml
        git commit -m "Update image versions - Frontend: v${FRONTEND_VERSION}, Backend: v${BACKEND_VERSION}" || echo "No changes to commit"
        git push origin main

    - name: update kubectl config
      run : |
        aws eks update-kubeconfig --name my-eks --region us-east-2

    - name: apply ingress.yaml
      run: |
        kubectl apply -f k8s/ingress.yaml

    - name: Print Image URLs and Versions
      run: |
        echo "Frontend image updated to version: v${{ steps.frontend-version.outputs.version }}"
        echo "Backend image updated to version: v${{ steps.backend-version.outputs.version }}"

    #- name: Set S3 Object ACL to Public
    #  env:
    #    S3_BUCKET: ${{ secrets.S3_NAME }}
    #  run: |
    #    cd mainpage
        # 이미지 폴더 전체를 public-read로 설정
    #    aws s3 sync ./images s3://${S3_BUCKET}/images/ --acl public-read
        # HTML 파일들을 public-read로 설정
    #    aws s3api put-object-acl --bucket ${S3_BUCKET} --key "main.html" --acl public-read
    #    aws s3api put-object-acl --bucket ${S3_BUCKET} --key "signin.html" --acl public-read
    #    aws s3api put-object-acl --bucket ${S3_BUCKET} --key "signup.html" --acl public-read

    # 캐시 무효화
    # cloudfront의 id를 교체해야함
    #- name: Invalidate CloudFront Cache
    #  run: |
    #    aws cloudfront create-invalidation \
    #      --distribution-id EQ47YREQWF3MJ \
    #      --paths "/*"